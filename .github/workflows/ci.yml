name: ci
on:
  push:
  pull_request:
    branches: 
    - main
  workflow_dispatch:
  schedule:
  - cron: '0 1 * * *'

env:
  VCPKG_ROOT_DIR: ${{ github.workspace }}/vcpkg
  # Tells vcpkg where binary packages are stored.
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
  # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.11" }

    - name: Install codespell
      run: pip3 install codespell
    
    - name: Install clang-format
      run: pip3 install clang-format

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  test:
    needs: [lint]

    name: test-${{ matrix.os }}-${{ matrix.build-type }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, Release]
        os: [ubuntu-latest, macos-13, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-13
            triplet: x64-osx

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup

      - name: Restore from cache the dependencies and generate project files
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])" -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} 

      - name: Build
        run: cmake --build build --config ${{ matrix.build-type }} -j 2

      - name: Install
        run: cmake --install build --config ${{ matrix.build-type }} --prefix prefix

      - name: Test
        if: matrix.os != 'windows-latest' && matrix.build-type == 'Release'
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C ${{ matrix.build-type }} -j 2

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/actions/setup

    - name: Get a newer clang
      run: sudo apt-get update && sudo apt-get install clang-15 -y
  
    - name: Configure
      env: { CXX: clang++-15 }
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/main' && github.repository_owner == 'conorwilliams' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/actions/setup

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage/coverage.info

  docs:
    # Deploy docs only when builds succeed
    # needs: [sanitize, test]

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install python dependencies
      run: pip3 install -r docs/requirements.txt

    - name: Install brew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        (echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') >> /home/runner/.bash_profile
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    - name: Install Doxygen
      run: brew install doxygen

    - name: Configure docs
      run: cmake -S ./docs -B build/docs

    - name: Build docs
      run: cmake --build build/docs

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/docs/sphinx
      if: github.ref == 'refs/heads/main' && github.repository_owner == 'conorwilliams' && github.event_name == 'push'